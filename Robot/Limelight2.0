// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  //create and instantiate 2 joysticks
  private Joystick joyLeft = new Joystick(0);
  private Joystick joyRight = new Joystick(1);

  //create and instantiate 4 motor controllers
  private WPI_TalonSRX leftFront = new WPI_TalonSRX(0);
  private WPI_TalonSRX leftBack = new WPI_TalonSRX(1);
  private WPI_TalonSRX rightFront = new WPI_TalonSRX(3);
  private WPI_TalonSRX rightBack = new WPI_TalonSRX(2);

  private double kDeadband = .02;
  private double x = 0.0;   // x-axis motion-right (+), left (-)
  private double y = 0.0;   // y-axis motion-forward (+), backward (-)
  private double z = 0.0;   // z-axis motion-clockwise (+), counterclockwise (-)

  private double leftFrontPower, leftBackPower, rightFrontPower, rightBackPower, max;
  private double testSpeed = 0.5;

  private double startTime;

  
  // These numbers must be tuned for your Robot!  Be careful!
  private double KpAim = 0.045;
  private double KpDistance = 0.1;          //double DRIVE_K = 0.26; // how hard to drive fwd toward the target

  private double min_aim_command = 0.05;
  final double MAX_DRIVE = 0.7;             // Simple speed limit so we don't drive too fast
  final double DESIRED_TARGET_AREA = 13.0;  // Area of the target when the robot reaches the wall
  double steering_adjust = 0.0;

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    leftFront.setInverted(false);
    leftBack.setInverted(false);
    rightFront.setInverted(true); //invert on the right side
    rightBack.setInverted(true);  //invert on the right side
  }

  @Override
  public void robotPeriodic() {}

  @Override
  public void autonomousInit() {
    startTime = Timer.getFPGATimestamp(); //time when robot starts in autonomous mode
  }

  @Override
  public void autonomousPeriodic() {
    double time = Timer.getFPGATimestamp();   //get the current time

    if (time - startTime < 3) {               //if we are still in 3 sec.
      leftFront.set(testSpeed);               //since robot moves forward, each wheel has same speed
      leftBack.set(testSpeed);          //and we don't have to worry about x and z components
      rightFront.set(-testSpeed);
      rightBack.set(-testSpeed);
    } 
    else {                                    //stop when time is running out
      leftFront.set(0);
      leftBack.set(0);
      rightFront.set(0);
      rightBack.set(0);
    }
  }

  @Override
  public void teleopInit() {}

  @Override
  public void teleopPeriodic() {
    // If you hold the button 9 down, and the limelight sees a valid target (depending on the settings
    // in your pipeline) then the robot will automatically drive towards the target
    if (joyLeft.getRawButton(9)){
      Update_Limelight_Tracking();
    }
    else{
      //z-axis threshold
      //  Twisting stickTwo clockwwise and counterclockwise rotate the robot clockwise and counterclockwise respectively
      z = joyRight.getRawAxis(2);

      //y-axis threshold
      y = -joyLeft.getRawAxis(1); //pushing stick upward return a negative Y value, so negate it

      //x-axis threshold
      x = joyLeft.getRawAxis(0);
      x *= 1.5;       //increase x component to counteract imperfect stafing
    }

    if (Math.abs(joyRight.getRawAxis(2)) <= kDeadband) z = 0.0;
    if (Math.abs(joyLeft.getRawAxis(1)) <= kDeadband) y = 0.0;
    if (Math.abs(joyLeft.getRawAxis(0)) <= kDeadband) x = 0.0;

    SmartDashboard.setDefaultNumber("z (turn)", z);
    SmartDashboard.setDefaultNumber("y (vertical)", y);
    SmartDashboard.setDefaultNumber("x (horizontal)", x); 

/*
          ↑                                →                                     ↷
    LF ┌─────┐RF                     LF ┌─────┐RF                          LF ┌─────┐RF
  ↑ ┌─┐│     │┌─┐↑                 ↑ ┌─┐│     │┌─┐↓                      ↑ ┌─┐│     │┌─┐↓
    └─┘│     │└─┘                    └─┘│     │└─┘                         └─┘│     │└─┘
  ↑ ┌─┐│     │┌─┐↑                 ↓ ┌─┐│     │┌─┐↑                      ↑ ┌─┐│     │┌─┐↓
    └─┘│     │└─┘                    └─┘│     │└─┘                         └─┘│     │└─┘
    LB └─────┘RB                     LB └─────┘RB                          LB └─────┘RB

    y conponent controls Fwd/Bwd   x component controls Straf R/L    z controls Rotate clockwise/counterclockwise
    Fwd:all wheels forward (+y)    Straf R: LF,RB: +x, RF,LB: -x     clocwise: LF,LB: +z, RF,RB: -z
    LF.set(y+ + )                  LF.set(y +x +)                    LF.set(y +x +z)
    LB.set(y+ + )                  LB.set(y -x + )                   LB.set(y -x +z )
    RF.set(y+ + )                  RF.set(y -x + )                   RF.set(y -x -z )
    RB.set(y+ + )                  RB.set(y +x + )                   RB.set(y +x -z )

*/

    leftFrontPower = y +x +z;
    leftBackPower  = y -x +z;
    rightFrontPower= y -x -z;
    rightBackPower = y +x -z;

    //the power applies to each wheel could be > 1 or <-1
    //If the power is >1, it will be set to 1 by the SDK, if it is < -1, it will be set to -1
    //For ex: if LF power = 0.4, LB=0.1, RF=1.1, and RB=1.4
    //it will be round off to LF=0.4, LB=0.1, RF=1.0, and RB=1.0
    //This round off will cause unstability in the robot
    //Instead, we will devide the power of each wheel with the largest of x,y,z if the power of any wheel > 1 

    if (Math.abs(leftFrontPower) > 1 || Math.abs(leftBackPower) > 1 ||
        Math.abs(rightFrontPower) > 1 || Math.abs(rightBackPower) > 1){

      //find the largest power
      max = Math.max(Math.abs(leftFrontPower), Math.abs(leftBackPower));
      max = Math.max(Math.abs(rightFrontPower), max);
      max = Math.max(Math.abs(rightBackPower), max);

      //Divide everything by max
      leftFrontPower /= max;
      leftBackPower /= max;
      rightFrontPower /= max;
      rightBackPower /= max;

    }

    //set power to each wheel
    leftFront.set(leftFrontPower);
    leftBack.set(leftBackPower);
    rightFront.set(rightFrontPower);
    rightBack.set(rightBackPower);

  }

  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {
    // Forward polarity test
    if (joyLeft.getRawButton(5))  //press and hold button 5 of joystick1
      leftFront.set(testSpeed);   //  leftFront wheel should turn forward. If not, change its inverse value
    else if (joyLeft.getRawButton(3)) //press and hold button 3 of joystick1
      leftBack.set(testSpeed);    //  leftBack wheel should turn forward. If not, change its inverse value
    else if (joyLeft.getRawButton(6)) //press and hold button 6 of joystick1
      rightFront.set(-testSpeed); //  rightFront wheel should turn backward. If not, change its inverse value
    else if (joyLeft.getRawButton(4)) //press and hold button 4 of joystick1
      rightBack.set(-testSpeed);  //  rightBack wheel should turn backward. If not, change its inverse value
    else{       //if no button pressed, all wheels stop
      leftFront.set(0);
      leftBack.set(0);
      rightFront.set(0);
      rightBack.set(0);
    }
  }

  public void Update_Limelight_Tracking(){
    
    //limelight return us the NetworkTable containing the following info:
    //tv: Whether the limelight has any valid targets (0 or 1)
    //tx: Horizontal Offset From Crosshair To Target (LL1: -27 degrees to 27 degrees | LL2: -29.8 to 29.8 degrees)
    //ty: Vertical Offset From Crosshair To Target (LL1: -20.5 degrees to 20.5 degrees | LL2: -24.85 to 24.85 degrees)
    //ta: Target Area (0% of image to 100% of image)

    double tv = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
    double tx = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0);
    double ty = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ty").getDouble(0);
    double ta = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ta").getDouble(0);

    if (tv == 0.0){                          //no valid target
      // We don't see the target, seek for the target by spinning in place at a safe speed.
      steering_adjust = 0.3;
      y +=steering_adjust;
      z -=steering_adjust;
    }
    else{                                   // We do see the target, execute aiming code
      steering_adjust = KpAim * tx;
      z = steering_adjust;

      // try to drive forward until the target area reaches our desired area
      y = (DESIRED_TARGET_AREA - ta) * KpDistance;

      // don't let the robot drive too fast into the goal
      if (y > MAX_DRIVE) y = MAX_DRIVE;

    }

  }
}

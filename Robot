// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  //create and instantiate 2 joysticks
  private Joystick joyLeft = new Joystick(0);
  private Joystick joyRight = new Joystick(1);

  //create and instantiate 4 motor controllers
  private WPI_TalonSRX leftFront = new WPI_TalonSRX(0);
  private WPI_TalonSRX leftBack = new WPI_TalonSRX(1);
  private WPI_TalonSRX rightFront = new WPI_TalonSRX(3);
  private WPI_TalonSRX rightBack = new WPI_TalonSRX(2);

  private double kDeadband = 0.2;
  private double x = 0.0;		// x-axis motion-right (+), left (-)
  private double y = 0.0;		// y-axis motion-forward (+), backward (-)
  private double z = 0.0;		// z-axis motion-clockwise (+), counterclockwise (-)
/*  
  private int leftFrontPolarity = 1; 	// These variables flip the sign value of
  private int leftBackPolarity = 1; 	  // the motors in the situation that they are
  private int rightFrontPolarity = -1; 	// flipped
  private int rightBackPolarity = -1;
*/
  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    leftFront.setInverted(false);
    leftBack.setInverted(false);
    rightFront.setInverted(true);     //invert on the right side
    rightBack.setInverted(true);      //invert on the right side
  }

  @Override
  public void robotPeriodic() {

    //z-axis threshold
    //  Pushing stickTwo right and left rotate the robot counter clockwise and counterclockwise respectively
    if (Math.abs(joyRight.getRawAxis(2)) > kDeadband){
      z = joyRight.getRawAxis(2);
    }
    else{
      z = 0.0;
    }

    //y-axis threshold
    if (Math.abs(joyLeft.getRawAxis(1)) > kDeadband){
      y = -joyLeft.getRawAxis(1);	//pushing stick upward return a negative Y value, so negate it
    }
    else{
      y = 0.0;
    }

    //x-axis threshold  (strafe)
    //  Pushing stickOne to the right and left correlates to strafing right and left.
    if (Math.abs(joyLeft.getRawAxis(0)) > kDeadband){
      x = joyLeft.getRawAxis(0);
      x *= 1.5;                  //increase x component to counteract imperfect stafing
    }
    else{
      x = 0.0;
    }
    SmartDashboard.putNumber("z (turn): ", z);
    SmartDashboard.putNumber("y (forward/backward): ", y);
    SmartDashboard.putNumber("x (straf): ", x);
/*
          ↑                                →                                     ↷
    LF ┌─────┐RF                     LF ┌─────┐RF                          LF ┌─────┐RF
  ↑ ┌─┐│     │┌─┐↑                 ↑ ┌─┐│     │┌─┐↓                      ↑ ┌─┐│     │┌─┐↓
    └─┘│     │└─┘                    └─┘│     │└─┘                         └─┘│     │└─┘
  ↑ ┌─┐│     │┌─┐↑                 ↓ ┌─┐│     │┌─┐↑                      ↑ ┌─┐│     │┌─┐↓
    └─┘│     │└─┘                    └─┘│     │└─┘                         └─┘│     │└─┘
    LB └─────┘RB                     LB └─────┘RB                          LB └─────┘RB

    y conponent controls Fwd/Bwd   x component controls Straf R/L    z controls Rotate clockwise/counterclockwise
    Fwd:all wheels forward (+y)    Straf R: LF,RB: +x, RF,LB: -x     clocwise: LF,LB: +z, RF,RB: -z
    LF.set(y+ + )                  LF.set(y +x +)                    LF.set(y +x +z)
    LB.set(y+ + )                  LB.set(y -x + )                   LB.set(y -x +z )
    RF.set(y+ + )                  RF.set(y -x + )                   RF.set(y -x -z )
    RB.set(y+ + )                  RB.set(y +x + )                   RB.set(y +x -z )

*/
    double leftFrontPower, leftBackPower, rightFrontPower, rightBackPower, max;

    leftFrontPower = y +x +z;
    leftBackPower  = y -x +z;
    rightFrontPower= y -x -z;
    rightBackPower = y +x -z;

    //the power applies to each wheel could be > 1 or <-1
    //If the power is >1, it will be set to 1 by the SDK, if it is < -1, it will be set to -1
    //For ex: if LF power = 0.4, LB=0.1, RF=1.1, and RB=1.4
    //it will be round off to LF=0.4, LB=0.1, RF=1.0, and RB=1.0
    //This round off will cause unstability in the robot
    //Instead, we will devide the power of each wheel with the largest of x,y,z if the power of any wheel > 1 
    if (Math.abs(leftFrontPower) > 1 || Math.abs(leftBackPower) > 1 ||
        Math.abs(rightFrontPower) > 1 || Math.abs(rightBackPower) > 1 ) {

      // Find the largest power
      max = Math.max(Math.abs(leftFrontPower), Math.abs(leftBackPower));
      max = Math.max(Math.abs(rightFrontPower), max);
      max = Math.max(Math.abs(rightBackPower), max);

      // Divide everything by max (max is positive so we don't need to worry about sign)
      leftFrontPower  /= max;
      leftBackPower   /= max;
      rightFrontPower /= max;
      rightBackPower  /= max;
    }

    //set power to each wheel
    leftFront.set(leftFrontPower);
    leftBack.set(leftBackPower);
    rightFront.set(rightFrontPower);
    rightBack.set(rightBackPower);

  }

  @Override
  public void autonomousInit() {}

  @Override
  public void autonomousPeriodic() {}

  @Override
  public void teleopInit() {}

  @Override
  public void teleopPeriodic() {}

  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {
    // Forward polarity test
    if (joyLeft.getRawButton(5))          //press and hold button 5 of joystick1
      leftFront.set(.3);                  //leftFront wheel should turn forward. If not, change its inverse
    else if (joyLeft.getRawButton(3))     //press and hold button 3 of joystick1
      leftBack.set(.3);                   //leftBack wheel should turn forward. If not, change its inverse
    else if (joyLeft.getRawButton(6))     //press and hold button 6 of joystick1
      rightFront.set(-.3);                //rightFront wheel should turn backward. If not, change its inverse
    else if (joyLeft.getRawButton(4))     //press and hold button 4 of joystick1
      rightBack.set(-.3);                 //rightBack wheel should turn backward. If not, change its inverse
    else {                                //if no button pressed, all wheels stop
      leftFront.set(0);
      leftBack.set(0);
      rightFront.set(0);
      rightBack.set(0);
    }
  }   
}
